# -*- coding: utf-8 -*-
"""hackaton.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16nEKVM4xXN2RySWaBLipN4Wdc6GI3mdu
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd

payments = pd.read_excel('/content/drive/MyDrive/hackaton_dataset/payments.xlsx', index_col=0) #Query result

keywords = pd.read_excel('/content/drive/MyDrive/hackaton_dataset/keywords.xlsx', index_col=0)

payments.head()

keywords.head()

temp_df = payments[['user_id', 'campaign_id']]

user_campaigns = temp_df.groupby('user_id')['campaign_id'].apply(list).reset_index()

user_campaigns.head()

# Пример данных
# Создание DataFrame из примера данных
campaign_keywords = keywords.copy()

# Преобразование индекса в обычный столбец
campaign_keywords.reset_index(inplace=True)

campaign_keywords.head()

# Создание словаря для быстрого доступа к ключевым словам по campaign_id
campaign_keywords_dict = campaign_keywords.groupby('campaign_id')['keyword_id'].apply(list).to_dict()

# Функция для преобразования списка campaign_id в список уникальных ключевых слов
def get_unique_keywords(campaign_ids):
    keywords = []
    for cid in campaign_ids:
        if cid in campaign_keywords_dict:
            keywords.extend(campaign_keywords_dict[cid])
    return list(set(keywords))

# Применение функции к каждому user_id
user_campaigns['unique_keywords'] = user_campaigns['campaign_id'].apply(get_unique_keywords)

# Создание новой таблицы с user_id и unique_keywords
user_unique_keywords = user_campaigns[['user_id', 'unique_keywords']]

# Вывод новой таблицы
user_unique_keywords

# Сохранение DataFrame в файл Excel
user_unique_keywords.to_excel('/content/drive/MyDrive/hackaton_dataset/dataset.xlsx', index=False)

data = user_unique_keywords.copy()

import lightgbm as lgb
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, MultiLabelBinarizer
from sklearn.multioutput import MultiOutputClassifier
from sklearn.metrics import accuracy_score

# Encode categorical features
le_user_id = LabelEncoder()
data['user_id'] = le_user_id.fit_transform(data['user_id'])

data

# Binarize product categories
mlb = MultiLabelBinarizer()
data = data.join(pd.DataFrame(mlb.fit_transform(data.pop('unique_keywords')), columns=mlb.classes_))

# Define features (X) and target (y)
X = data['user_id']
y = data[mlb.classes_]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

X_train_np = X_train.to_numpy()
X_train_np_reshaped = X_train_np.reshape(-1, 1)

model = MultiOutputClassifier(lgb.LGBMClassifier(num_leaves=40, learning_rate=0.03, n_estimators=200))

model.fit(X_train_np_reshaped, y_train)

X_test_np = X_test.to_numpy()
X_test_np_reshaped = X_test_np.reshape(-1, 1)

y_pred = model.predict(X_test_np_reshaped)

y_pred.shape

y_test

r = y_test.loc[60959]

r

accuracy_score(y_test.loc[60959], y_pred[0])

y_pred_reshaped = y_pred.reshape(22, 15788)

y_pred_reshaped[0]

# Calculate accuracy for each product category and then find the average
accuracies = [accuracy_score(y_test[col], y_pred_reshaped[i]) for i, col in enumerate(y_test.columns)]

avg_accuracy = sum(accuracies) / len(accuracies)

print(f'Average Accuracy: {avg_accuracy:.4f}')

new_users = pd.DataFrame({
    'user_id': [12856]
})

new_users_pred = model.predict(new_users)

new_users_pred

# Print predicted product categories for new users
for i, user_pred in enumerate(new_users_pred):
    print(f'User {i+1}: {mlb.inverse_transform(user_pred.reshape(1, -1))[0]}')

import joblib

# Save the model
joblib.dump(model, '/content/drive/MyDrive/hackaton_dataset/multioutput_classifier_model.pkl')

# Load the model
loaded_model = joblib.load('/content/drive/MyDrive/hackaton_dataset/multioutput_classifier_model.pkl')

new_users_pred = loaded_model.predict(new_users)

new_users_pred

# Save the MultiLabelBinarizer
joblib.dump(mlb, '/content/drive/MyDrive/hackaton_dataset/multilabel_binarizer.pkl')

# Load the MultiLabelBinarizer
loaded_mlb = joblib.load('/content/drive/MyDrive/hackaton_dataset/multilabel_binarizer.pkl')

# Print predicted product categories for new users
for i, user_pred in enumerate(new_users_pred):
    print(f'User {i+1}: {loaded_mlb.inverse_transform(user_pred.reshape(1, -1))[0]}')

dictionary = dict(zip(user_unique_keywords['user_id'], data['user_id']))

print(dictionary)

import json

dict_path = '/content/drive/MyDrive/hackaton_dataset/dictionary.json'

# Сохранение словаря в файл
with open(dict_path, 'w') as file:
    json.dump(dictionary, file)

with open(dict_path, 'r') as file:
    loaded_dictionary = json.load(file)

print(loaded_dictionary)